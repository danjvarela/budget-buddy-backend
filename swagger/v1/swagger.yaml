---
openapi: 3.0.1
info:
  title: Budget Buddy API
  version: v1
paths:
  "/change-login":
    post:
      summary: Requests change of account email. Sends confirmation email to the new
        email.
      tags:
      - Account Management
      parameters: []
      security:
      - bearer_auth: []
      responses:
        '200':
          description: change email link has been sent to the new email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The new email.
                password:
                  type: string
              required:
              - email
              - password
  "/verify-login-change":
    post:
      summary: Changes the account email. The `key` is contained in the link that
        was sent to the new email when the change of email was requested.
      tags:
      - Account Management
      parameters: []
      responses:
        '200':
          description: account email has been changed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: The `key` is contained in the link that was sent to
                    the new email when the change of email was requested.
              required:
              - key
  "/change-password":
    post:
      summary: Changes account password. `password` here is the old password.
      tags:
      - Account Management
      parameters: []
      security:
      - bearer_auth: []
      responses:
        '200':
          description: password has been changed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The old password
                new-password:
                  type: string
                password-confirm:
                  type: string
              required:
              - password
              - new-password
              - password-confirm
  "/reset-password-request":
    post:
      summary: Requests change of account password. Sends a password reset link to
        the current email.
      tags:
      - Account Management
      parameters: []
      responses:
        '200':
          description: password reset link has been sent to the email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/reset-password":
    post:
      summary: Changes the account password. The `key` is contained in the password
        reset link that was sent the account email.
      tags:
      - Account Management
      parameters: []
      responses:
        '200':
          description: password reset link has been sent to the email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                password-confirm:
                  type: string
                key:
                  type: string
                  description: The `key` is contained in the password reset link that
                    was sent the account email.
              required:
              - password
              - password-confirm
              - key
  "/close-account":
    post:
      summary: Closes the account. Note that there is not endpoint for reopening the
        account.
      tags:
      - Account Management
      parameters: []
      security:
      - bearer_auth: []
      responses:
        '200':
          description: account has been closed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
              - password
  "/create-account":
    post:
      summary: Creates an unverified account. Sends a verification email to the provided
        email address.
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: unverified account has been created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                password-confirm:
                  type: string
              required:
              - email
              - password
              - password-confirm
            examples:
              '0':
                summary: Creates an unverified account. Sends a verification email
                  to the provided email address.
                value:
                  email: example01@email.com
                  password: 123qwe123
                  password-confirm: 123qwe123
  "/verify-account":
    post:
      summary: Verifies an account. The `key` is contained in the link that was sent
        to the user's email during account creation
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: account has been verified
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: The `key` is contained in the link that was sent to
                    the user's email during account creation
              required:
              - key
  "/login":
    post:
      summary: Logs in to an existing, verified account.
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: user has been logged in
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
            examples:
              '0':
                summary: Logs in to an existing, verified account.
                value:
                  email: example01@email.com
                  password: 123qwe123
  "/logout":
    post:
      summary: Logs out the current session. Include the `global_logout` attribute
        and pass any value to logout of all sessions, otherwise don't include it in
        the request body.
      tags:
      - Authentication
      parameters: []
      security:
      - bearer_auth: []
      responses:
        '200':
          description: user has been logged out
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                global_logout:
                  type: string
                  description: Include this attribute and pass any value to logout
                    of all sessions, otherwise don't include it in the request body.
  "/verify-account-resend":
    post:
      summary: Resends account verification email. Note that there is a 5-minute delay
        between resends.
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: email verification has been resent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/categories":
    post:
      summary: Creates a new category
      tags:
      - Categories
      parameters: []
      security:
      - bearer_auth: []
      responses:
        '201':
          description: category created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/category"
        '422':
          description: failed to create category
          content:
            application/json:
              examples:
                example:
                  value:
                    errors:
                      name:
                      - can't be blank
              schema:
                "$ref": "#/components/schemas/resource_creation_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_category_params"
            examples:
              example:
                summary: Creates a new category
                value:
                  name: Transportation
                  category_type: expense
    get:
      summary: Gets all categories associated to the logged in account
      tags:
      - Categories
      security:
      - bearer_auth: []
      parameters:
      - name: category_type
        in: query
        description: This is type of category to query. It can be `income` or `expense`.
          The request will return all the categories for the logged in user if this
          is not specified or its value is null.
        schema:
          type: string
      responses:
        '200':
          description: categories returned
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/category"
  "/categories/{id}":
    get:
      summary: Gets the details of a category
      tags:
      - Categories
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      security:
      - bearer_auth: []
      responses:
        '200':
          description: category returned
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/category"
        '404':
          description: category not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resource_not_found_error"
    put:
      summary: Updates a category
      tags:
      - Categories
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      security:
      - bearer_auth: []
      responses:
        '200':
          description: category updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/category"
        '404':
          description: category not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resource_not_found_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/base_category"
    delete:
      summary: deletes a category
      tags:
      - Categories
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      security:
      - bearer_auth: []
      responses:
        '204':
          description: category deleted
        '404':
          description: category not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resource_not_found_error"
  "/financial_accounts":
    post:
      summary: Creates a new financial account
      tags:
      - Financial Accounts
      parameters: []
      security:
      - bearer_auth: []
      responses:
        '201':
          description: financial account created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/financial_account"
        '422':
          description: failed to create financial account
          content:
            application/json:
              examples:
                example:
                  value:
                    errors:
                      name:
                      - can't be blank
              schema:
                "$ref": "#/components/schemas/resource_creation_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_financial_account_params"
            examples:
              example:
                summary: Creates a new financial account
                value:
                  name: Cash
                  amount: 30.0
                  description: Cash on hand
    get:
      summary: Gets all financial accounts associated to the logged in account
      tags:
      - Financial Accounts
      security:
      - bearer_auth: []
      responses:
        '200':
          description: financial accounts returned
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/financial_account"
  "/financial_accounts/{id}":
    get:
      summary: Gets the details of a financial account
      tags:
      - Financial Accounts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      security:
      - bearer_auth: []
      responses:
        '200':
          description: financial account returned
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/financial_account"
        '404':
          description: financial account not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resource_not_found_error"
    put:
      summary: Updates a financial account
      tags:
      - Financial Accounts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      security:
      - bearer_auth: []
      responses:
        '200':
          description: financial account updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/financial_account"
        '404':
          description: financial account not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resource_not_found_error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/base_financial_account"
    delete:
      summary: deletes a financial account
      tags:
      - Financial Accounts
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      security:
      - bearer_auth: []
      responses:
        '204':
          description: financial account deleted
        '404':
          description: financial account not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resource_not_found_error"
  "/current-account":
    get:
      summary: Retrieves the currently logged account
      tags:
      - Session
      security:
      - bearer_auth: []
      responses:
        '200':
          description: success
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
  schemas:
    resource_creation_error:
      type: object
      properties:
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
      - errors
    resource_not_found_error:
      type: object
      properties:
        error:
          type: string
    base_financial_account:
      type: object
      properties:
        name:
          type: string
        amount:
          type: number
          format: float
        description:
          type: string
          nullable: true
    create_financial_account_params:
      allOf:
      - "$ref": "#/components/schemas/base_financial_account"
      required:
      - name
      - amount
    financial_account:
      allOf:
      - "$ref": "#/components/schemas/base_financial_account"
      - type: object
        properties:
          id:
            type: integer
    base_category:
      type: object
      properties:
        category_type:
          type: string
          enum:
          - income
          - expense
        name:
          type: string
    create_category_params:
      allOf:
      - "$ref": "#/components/schemas/base_category"
      required:
      - name
      - category_type
    category:
      allOf:
      - "$ref": "#/components/schemas/base_category"
      - type: object
        properties:
          id:
            type: integer
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: budget-buddy-backend.fly.dev
